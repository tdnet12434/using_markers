#!/usr/bin/env python
PACKAGE = "using_markers"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
gen.add("KplevelRoll_param", double_t, 0, "Kp_levelRoll",    10.0, 0,   20)
gen.add("KprateRoll_param", double_t, 0, "Kp_rateRoll",      70.0, 0,   100)
gen.add("KirateRoll_param", double_t, 0, "Ki_rateRoll",       1.0, 0,   10)
gen.add("KdrateRoll_param", double_t, 0, "Kd_rateRoll",       5.0, 0,   10)

gen.add("KplevelPitch_param", double_t, 0, "Kp_levelPitch",  10.0, 0,   20)
gen.add("KpratePitch_param", double_t, 0, "Kp_ratePitch",    70.0, 0,   100)

gen.add("sending_pid1",   bool_t,   0, "if true it sending and not yet response",  False)



gen.add("KiratePitch_param", double_t, 0, "Ki_ratePitch",    1.0, 0,   10)
gen.add("KdratePitch_param", double_t, 0, "Kd_ratePitch",    5.0, 0,   10)

gen.add("KplevelYaw_param", double_t, 0, "Kp_levelYaw",    7.0, 0,   10)
gen.add("KprateYaw_param", double_t, 0, "Kp_rateYaw",    100.0, 0,   200)
gen.add("KirateYaw_param", double_t, 0, "Ki_rateYaw",     15.0, 0,   50)
gen.add("KdrateYaw_param", double_t, 0, "Kd_rateYaw",      7.0, 0,   20)

gen.add("sending_pid2",   bool_t,   0, "if true it sending and not yet response",  False)


#ALT PID

gen.add("lambdaalt_param", double_t, 0, "lambda_alt",     0.11, 0,   1)
gen.add("KpAltitude_param", double_t, 0, "Kp_altitude",    350,  0,   1000)
gen.add("KiAltitude_param", double_t, 0, "Ki_altitude",    100,  0,   1000)
gen.add("KdAltitude_param", double_t, 0, "Kd_altitude",    200,  0,   1000)
gen.add("KaAltitude_param", double_t, 0, "Ka_altitude",    150,  0,   1000)

gen.add("sending_pid_alt",   bool_t,   0, "if true it sending and not yet response",  False)

#PID NAV
gen.add("KpVel_param", double_t, 0, "Kp_vel",    0.5, 0,   2)
gen.add("KiVel_param", double_t, 0, "Ki_vel",   0.05, 0,   2)
gen.add("KdVel_param", double_t, 0, "Kd_vel",   0.02, 0,   2)
gen.add("KpPos_param", double_t, 0, "Kp_pos",    0.3, 0,   2)
gen.add("KiPos_param", double_t, 0, "Ki_pos",      1, 0,   2)


gen.add("sending_pid_NAV",   bool_t,   0, "if true it sending and not yet response",  False)







#gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
#gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

#size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                     #   gen.const("Medium",     int_t, 1, "A medium constant"),
                     #   gen.const("Large",      int_t, 2, "A large constant"),
                     #   gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
                     # "An enum to set size")

#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "using_markers", "pid"))